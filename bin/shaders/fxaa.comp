#version 460 core

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2D screen;

uniform float u_ThresholdMin;
uniform float u_ThresholdMax;

float
rgb2luma(vec3 rgb) {
    return sqrt(dot(rgb, vec3(0.299, 0.587, 0.114)));
}

void
main() {

    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    vec3 pixel = imageLoad(screen, pixelCoords).rgb;

    float pixelLuma = rgb2luma(pixel);

    vec3 left = imageLoad(screen, pixelCoords + ivec2(-1, 0)).rgb;
    float leftLuma = rgb2luma(left);
    vec3 right = imageLoad(screen, pixelCoords + ivec2(1, 0)).rgb;
    float rightLuma = rgb2luma(right);
    vec3 down = imageLoad(screen, pixelCoords + ivec2(0, -1)).rgb;
    float downLuma = rgb2luma(down);
    vec3 up = imageLoad(screen, pixelCoords + ivec2(0, 1)).rgb;
    float upLuma = rgb2luma(up);

    float minLuma = min(min(pixelLuma, min(leftLuma, rightLuma)), min(downLuma, upLuma));
    float maxLuma = max(max(pixelLuma, max(leftLuma, rightLuma)), max(downLuma, upLuma));

    float lumaDiff = maxLuma - minLuma;

    if (lumaDiff < max(u_ThresholdMin, maxLuma * u_ThresholdMax)) {
        imageStore(screen, pixelCoords, vec4(pixel, 1.0));
    } else {
        vec3 avg = (pixel + left + right + up + down) / 5.0;
        imageStore(screen, pixelCoords, vec4(avg, 1.0));
    }
}