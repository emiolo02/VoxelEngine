#version 460 core

#include "rt.glsl"

layout (local_size_x = 8, local_size_y = 4, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2D screen;

uniform vec2 u_Resolution;

uniform mat4 u_InvProjection;
uniform mat4 u_InvView;
uniform vec3 u_CameraPosition;

layout (binding = 1, std430) readonly buffer ssbo1
{
    uint Voxels[];
};

uniform vec3 u_GridMinBounds;
uniform vec3 u_GridMaxBounds;
uniform int u_GridXSize;
uniform int u_GridYSize;
uniform int u_GridZSize;
uniform float u_VoxelSize;

uniform bool u_ShowSteps;
uniform bool u_ShowNormals;

Ray ray;

vec4
Traverse(out vec3 normal, out uint steps) {
    float tNear, tFar;
    steps = 0;
    normal = vec3(0.0);
    if (!IntersectAABB(ray, tNear, tFar, u_GridMinBounds, u_GridMaxBounds)) {
        return vec4(0);
    }

    tNear = max(tNear + 0.0001, 0.0);

    ivec3 gridStep = ivec3(sign(ray.direction));
    vec3 invRayDir = 1.0 / ray.direction;

    vec3 near = vec3(tNear) + max(vec3(0.0001), vec3(0)) * gridStep;
    vec3 rayStart = ray.origin + ray.direction * tNear - u_GridMinBounds;
    rayStart /= u_VoxelSize;


    ivec3 currentVoxel = ivec3(floor(rayStart));
    ivec3 nextVoxel = currentVoxel + max(gridStep, ivec3(0));

    ivec3 outOfBounds;
    outOfBounds.x = ray.direction.x > 0.0 ? u_GridXSize : -1;
    outOfBounds.y = ray.direction.y > 0.0 ? u_GridXSize : -1;
    outOfBounds.z = ray.direction.z > 0.0 ? u_GridXSize : -1;

    vec3 tMax = (nextVoxel - rayStart) * invRayDir;
    vec3 tDelta = invRayDir * gridStep;

    uint voxel = Voxels[currentVoxel.x + u_GridXSize * (currentVoxel.y + u_GridZSize * currentVoxel.z)];

    int stepAxis = (tMax.x < tMax.y) ? ((tMax.x < tMax.z) ? 0 : 2) : ((tMax.y < tMax.z) ? 1 : 2);

    while (voxel == 0)
    {
        steps++;

        stepAxis = (tMax.x < tMax.y) ? ((tMax.x < tMax.z) ? 0 : 2) : ((tMax.y < tMax.z) ? 1 : 2);

        tMax[stepAxis] += tDelta[stepAxis];
        currentVoxel[stepAxis] += gridStep[stepAxis];

        if (currentVoxel[stepAxis] == outOfBounds[stepAxis]) {
            return vec4(0);
        }

        voxel = Voxels[currentVoxel.x + u_GridXSize * (currentVoxel.y + u_GridZSize * currentVoxel.z)];
    }

    normal[stepAxis] = -gridStep[stepAxis];

    //return vec4(currentVoxel / 8.0, 1);
    return DecodeColor(voxel);
}

void
main() {
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = (vec2(pixelCoords) / u_Resolution) * 2.0 - 1.0;
    ray = CastRay(u_CameraPosition, u_InvView, u_InvProjection, uv);

    vec3 normal;
    uint steps;

    vec4 voxelColor = Traverse(normal, steps);
    vec4 frag;
    if (u_ShowSteps) {
        frag = DecodeSteps(steps, ivec3(u_GridXSize, u_GridYSize, u_GridZSize)); // + voxelColor;
    } else if (u_ShowNormals) {
        frag = vec4(normal * 0.5 + 0.5, 1.0);
    } else {
        frag = voxelColor * max(dot(normal, vec3(0.3, 1.0, 0.3)), 0.1);
    }

    imageStore(screen, pixelCoords, frag);
}
